name: Push Check on Changed Scripts
run-name: Action on push by ${{ github.actor }} 

on:
  workflow_call:
    inputs:
    
      image_to_use:
        required: true
        type: string
      
jobs:
  Check_on_Changed_Scripts:
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.image_to_use }}
      credentials:
         username: ${{ github.actor }}
         password: ${{ secrets.GITHUB_TOKEN }}
         
    steps:
      - name: Show Computing Environment
        id: Show_Computing_Environment
        run: |
          echo "Checking in ${{ inputs.image_to_use }}"
          bash
          . /root/miniconda3/etc/profile.d/conda.sh && conda init bash
          conda activate scworkflow
          conda list

      - uses: actions/checkout@v3
        with:
           token: ${{secrets.GITHUB_TOKEN}}
           ref: ${{ github.ref_name }}
      
      - name: Get Main Branch Commit
        id: mainCommit
        run: |
          bash
          repo_name=${{ github.repository }}
          access_token=${{ secrets.GITHUB_TOKEN }}

          response=$(curl -s -H "Authorization: Bearer $access_token" \
            "https://api.github.com/repos/$repo_name/branches/main")
          
          commit_hash=($(echo "$response" | grep -oP '(?<="sha": ")[^"]+'))

          echo "Latest commit hash of main branch: ${commit_hash[0]}"
          echo "main_commit_hash=${commit_hash[0]}" >> $GITHUB_ENV

      - name: Check if Branch Exists
        run: |
          bash
          branchName=$(echo ${{ github.ref }} | sed 's/refs\/heads\///')
          response=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/branches/$branchName")

          if [ -z "$response" ] || [ "$response" = "Not Found" ]; then
            echo "Branch $branchName does not exist."
            echo "create_on_push=No" >> $GITHUB_ENV
          else
            echo "Branch $branchName exists."
            echo "create_on_push=Yes" >> $GITHUB_ENV
          fi
            
      - name: Display Environment Variable
        run: |
          echo "create_on_push: ${{ env.create_on_push }}"
       
      - id: Lint_check
        name: Use lintr to check code
        run: |
          export current_wd="/__w/${GITHUB_REPOSITORY#*/}/${GITHUB_REPOSITORY#*/}"
          echo "$current_wd"

          bash
          . /root/miniconda3/etc/profile.d/conda.sh && conda init bash
          conda activate scworkflow

          pylint --version

          git --version
                   
          git config --global --add safe.directory $current_wd
          
          git clone https://github.com/fnlcr-bids-sdsi/gitflow-R.git
          
          cd gitflow-R
          git checkout single-cell-analysis

          cd $current_wd

          if [ "${{ env.create_on_push }}" = "Yes" ]; then

            MAIN_COMMIT=$(git rev-parse main)

            bash $current_wd/gitflow-R/Lint_on_Commit.sh "$current_wd" "$MAIN_COMMIT"

          else

            bash $current_wd/gitflow-R/Lint_on_Commit.sh "$current_wd" "${{ github.event.before }}"


          fi        
          
           
      - id: Unit_Test
        name: Unit test for changed scripts
        run: |
          export current_wd="/__w/${GITHUB_REPOSITORY#*/}/${GITHUB_REPOSITORY#*/}"
          echo "$current_wd"

          bash
          . /root/miniconda3/etc/profile.d/conda.sh && conda init bash
          conda activate scworkflow
          
          pytest --version

          bash $current_wd/gitflow-R/Check_on_Commit.sh "$current_wd" "${{ github.event.before }}"          
          
      - name: Undo Push
        if: ${{ failure() }}
        run: |
          export current_wd="/__w/${GITHUB_REPOSITORY#*/}/${GITHUB_REPOSITORY#*/}"
          echo "$current_wd"
          
          export MY_GIT_TOKEN=${{secrets.GITHUB_TOKEN}}
          export MY_GIT_USERNAME=${{ github.actor }}
          export MY_GIT_EMAIL=${{ github.event.pusher.email }}
          
          git config --global user.name "$MY_GIT_USERNAME"
          git config --global user.email "$MY_GIT_EMAIL"
          git config --global url."https://api:$MY_GIT_TOKEN@github.com/".insteadOf "https://github.com/"
          git config --global url."https://ssh:$MY_GIT_TOKEN@github.com/".insteadOf "ssh://git@github.com/"
          git config --global url."https://git:$MY_GIT_TOKEN@github.com/".insteadOf "git@github.com:"
          
          git clone https://github.com/${GITHUB_REPOSITORY}.git
          
          cd ${GITHUB_REPOSITORY#*/}
          
          git checkout ${{ github.ref_name }}
          
          git reset --hard ${{ github.event.before }}
          
          