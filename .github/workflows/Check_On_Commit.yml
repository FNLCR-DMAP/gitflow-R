name: Push Check on Changed Scripts
run-name: Action on push by ${{ github.actor }} 

on:
  workflow_call:
    inputs:
    
      image_to_use:
        required: true
        type: string
      
jobs:
  Check_on_Changed_Scripts:
    runs-on: ubuntu-latest
    container:
      image: ${{ inputs.image_to_use }}
      credentials:
         username: ${{ github.actor }}
         password: ${{ secrets.GITHUB_TOKEN }}
         
    steps:
      - run: echo "Checking in ${{ inputs.image_to_use }}"

      - uses: actions/checkout@v3
        with:
           token: ${{secrets.GITHUB_TOKEN}}
           ref: ${{ github.ref_name }}
           fetch-depth: 0
       
      - id: Lint_check
        name: Use lintr to check code
        run: |
          export current_wd="/__w/${GITHUB_REPOSITORY#*/}/${GITHUB_REPOSITORY#*/}"
          echo "$current_wd"
          
          git config --global --add safe.directory "$current_wd"
          
          git clone https://github.com/fnlcr-bids-sdsi/gitflow-R.git
          
          cd gitflow-R
          
          git checkout SCWorkflow
          
          cd -

          # Acquire main branch's latest hash for reference
          # This is to handle error message when new branch
          # is created from push

          access_token=${{ secrets.GITHUB_TOKEN }}

          response=$(curl -s -H "Authorization: Bearer $access_token" \
            "https://api.github.com/repos/$repo_name/branches/main")
          
          commit_hash=$(echo "$response" | \
            grep -oP '(?<="sha": ")[^"]+' | head -n 1)
          
          echo "Latest commit hash of main branch: $commit_hash"
          echo "main_commit_hash=$commit_hash" >> $GITHUB_ENV

          if [ "${{ github.event.before }}" = \
            "0000000000000000000000000000000000000000" ]; then
            echo "Branch $branchName is created by current push."
            
            bash $current_wd/gitflow-R/Lint_on_Commit.sh "$current_wd" "$commit_hash"

          else

            bash $current_wd/gitflow-R/Lint_on_Commit.sh "$current_wd" "${{ github.event.before }}"

          fi

          
           
      - id: Unit_Test
        name: Unit test for changed scripts
        run: |
          export current_wd="/__w/${GITHUB_REPOSITORY#*/}/${GITHUB_REPOSITORY#*/}"
          echo "$current_wd"
          
          # Acquire main branch's latest hash for reference
          # This is to handle error message when new branch
          # is created from push

          access_token=${{ secrets.GITHUB_TOKEN }}

          response=$(curl -s -H "Authorization: Bearer $access_token" \
            "https://api.github.com/repos/$repo_name/branches/main")
          
          commit_hash=$(echo "$response" | \
            grep -oP '(?<="sha": ")[^"]+' | head -n 1)
          
          echo "Latest commit hash of main branch: $commit_hash"
          echo "main_commit_hash=$commit_hash" >> $GITHUB_ENV

          if [ "${{ github.event.before }}" = \
            "0000000000000000000000000000000000000000" ]; then
            echo "Branch $branchName is created by current push."
            
            bash $current_wd/gitflow-R/Lint_on_Commit.sh "$current_wd" "$commit_hash"

          else

            bash $current_wd/gitflow-R/Lint_on_Commit.sh "$current_wd" "${{ github.event.before }}"

          fi        
          
      - name: Undo Push (Off)
        if: ${{ failure() }}
        run: |
          export current_wd="/__w/${GITHUB_REPOSITORY#*/}/${GITHUB_REPOSITORY#*/}"
          echo "$current_wd"
          
          export MY_GIT_TOKEN=${{secrets.GITHUB_TOKEN}}
          export MY_GIT_USERNAME=${{ github.actor }}
          export MY_GIT_EMAIL=${{ github.event.pusher.email }}
          
          git config --global user.name "$MY_GIT_USERNAME"
          git config --global user.email "$MY_GIT_EMAIL"
          git config --global url."https://api:$MY_GIT_TOKEN@github.com/".insteadOf "https://github.com/"
          git config --global url."https://ssh:$MY_GIT_TOKEN@github.com/".insteadOf "ssh://git@github.com/"
          git config --global url."https://git:$MY_GIT_TOKEN@github.com/".insteadOf "git@github.com:"
          
          # git clone https://github.com/${GITHUB_REPOSITORY}.git
          
          # cd ${GITHUB_REPOSITORY#*/}
          
          # git checkout ${{ github.ref_name }}
          
          # git reset --hard ${{ github.event.before }}
          
          # git push -f origin ${{ github.ref_name }}
